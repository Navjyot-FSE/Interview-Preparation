===================================
.Net Core
===================================
What is .NET Core?
.NET Core is a free, open-source, modular, cross-platform framework developed by Microsoft for building modern, high-performance applications.

What is the difference between String and string in C#?
"string" is an alias in the C# language for System. String. Both of them are compiled to System. String in IL (Intermediate Language), so there is no difference.

What is the .NET Framework?
a developer platform made up of tools, programming languages, and libraries for building many different types of applications.

What is .NET Standard?
.NET Standard is a formal specification of .NET APIs that are available on multiple .NET implementations. 
The motivation behind .NET Standard was to establish greater uniformity in the .NET ecosystem.

What you understand by Value types and Reference types in .NET?
Value Type - the variables of these data types directly contain values. (int, float, structure etc)
Reference Type - a reference type doesn't store its value directly. Instead, it stores the address where the value is being stored. (class, string etc)

What is Boxing and Unboxing?
Boxing converts a Value Type variable into a Reference(object) Type variable
Unboxing converts a Reference Type variable into a Value Type variable (Boxed back to original type)
Example ->
int num = 23;        // value type is int and assigned value 23
Object Obj = num;    // Boxing
int i = (int)Obj;    // Unboxing

Difference between SDK and Runtime in .NET Core?
SDK ==> to build and run .NET apps [SDK = Runtime + Tooling]
Runtime ==> to run .NET apps

difference between decimal, float and double in .NET?
Float - 7 digits (32 bit)
Double-15-16 digits (64 bit)
Decimal -28-29 significant digits (128 bit)

What is an unmanaged resource in .NET?
Unmanaged resources are not managed by the . NET garbage collector. 
These include resources like file handles, database connections, network sockets, graphics handles, or any other resource that the operating system provides.

What is CLR?
CLR is the basic and Virtual Machine component of the .NET Framework.

Name some CLR services?
Garbage collector, exception manager, threading, debugging, JIT compiler, Type safety.

What is Kestrel?
A cross-platform web server that runs on Windows, Linux, and macOS.

Explain two types of deployment for .NET Core applications?
Framework-Dependent Deployment (FDD) and Self-Contained Deployment (SCD). 
The first one depends on a system-wide version of .NET Core to be present before running the application, 
whereas the second type of deployment does not depend on any.

Explain the difference between Task and Thread in .NET?
A task can have multiple processes happening at the same time. 
Threads can only have one task running at a time.

What is CoreCLR?
CoreCLR is the runtime for .NET Core.

Why to use of the IDisposable interface?
The primary use of the IDisposable interface is to release unmanaged resources

What is JIT compiler?
It is called just-in-time since it converts the MSIL code to CPU native code; 
when it is required within code execution otherwise it will not do anything with that MSIL code.

What's the difference between RyuJIT and Roslyn?
Roslyn is a .NET Core compiler that compiles VB or C# code to the intermediate language (IL). 
Whereas, RyuJIT as the name suggests is a Just-In-Time compiler that works the other way around i.e. compiles the IL to native code.

Explain how does Asynchronous tasks Async/Await work in .NET? Related To: C#
Suppose we are using two methods as, Method1 and Method2, respectively, and both methods are not dependent on each other, and Method1 takes a long time to complete its task. 
In Synchronous programming, it will execute the first Method1, wait for the completion of this method, and then execute Method2. 
Thus, it will be a time-intensive process even though both methods are not depending on each other.
if any third Method, as Method3 has a dependency on method1, it will wait for the completion of Method1 with the help of await keyword.

What is the difference between AppDomain, Assembly, Process and a Thread?
A program is executed. A process is created by the operating system, and within its single thread it starts loading code to execute. In a .NET application, a single AppDomain is created by the CLR. The application's executing assembly (the .EXE) is loaded into this AppDomain and begins execution. The application can spawn new processes, create AppDomains, load other assemblies into these domains, and then create new Threads to execute code in any of these AppDomains.
An assembly holds one or more modules, which hold compiled chunks of code. You will typically see an assembly as an .EXE or a .DLL.

Why does .NET use a JIT compiler instead of just compiling the code once on the target machine?
As opposed to static compilers, which convert everything to machine code before execution, 
the JIT compiler performs the conversion continuously during program execution, while often caching compiled blocks of native code, 
thereby reducing pieces of IL code that are translated again and again to the same native code.

Explain Implicit Compilation process? [JIT Compilation]
Implicit compilation is a two-step process. 
The first step is converting the source code to intermediate language (IL) by a language-specific compiler. 
The second step is converting the IL to machine instructions.

What is Explicit Compilation? [AOT Compilation]
An explicit compiler compiles the source code into machine code prior to the execution of the program. (in short AOT Compilation)

Explain when to use Finalize vs Dispose?
Finalize gives implicit control over releasing resources. It is called by the garbage collector. (Finalize is not called by your code.)
Dispose is a way to give explicit control over a release of resources and can be called directly. (Dispose is usually called by your code.)

What is the difference between Node.js async model and async/await in .NET?
Node. js is asynchronously single-threaded, while ASP.NET is asynchronously multi-threaded. 

How many types of JIT Compilations do you know?
Three types
Pre-JIT Compiler (Compiles entire code into native code completely) 
Econo JIT Compiler (Compiles code part by part freeing when required) 
Normal JIT Compiler (Compiles only that part of code when called and places in cache)

======================================
C# & OOPs
======================================
What is a Framework and what does the .NET Framework provide?
A framework is a structure that you can build software on. It serves as a foundation, so you're not starting entirely from scratch.

Explain CLR and its Execution Process.
Source Code -> Language Complier -> (DLL/EXE)MSIL code -> JIT Compiler -> Native Code (Computer code)

Assembly/Meta Data/Assembly Manifest/MSIL CODE?
(.DLL or .EXE)Assembly = MSIL Code + assembly manifest + type metadata + resources.
Assembly Manifest -> is part of the assembly that describers set of files inside the assembly
MSIL Code - Code the compiler produced as it compiled the source code.
Type MetaData -> Metadata Every managed module contains metadata tables. There are two main types of tables: tables that describe the types and members defined in your source code and tables that describe the types and members referenced by your source code.

What is the difference between an EXE and a DLL?
EXE file is like a standalone app that you can run directly on your computer. 
DLL file is more like a helper that other apps call on to use its tools or features, but you can't run it by itself.

What’s the difference between IEnumerable<T> and List<T>?
with a List<T> you can add and remove items,
while with an IEnumerable<T> you can only iterate over the items.

Why class is called abstract data type?
A class containing varoius objects implies a set of data members along with their operations to be performed. 
The handling of instance variables is done through member methods of a class. 
This is the reason why a class is known as an abstract data type.

What is a verbatim string literal and why do we use it?
@"hello"	Basically the @ symbol tells the string constructor to ignore escape characters and line breaks.
Example - filepath > @"\\MyServer\TestFolder\NewFolder";

What are Properties in C#? Explain with an example?
Properties enable a class to expose a public way of getting and setting values, while hiding implementation or verification code. 
A get property accessor is used to return the property value, and a set property accessor is used to assign a new value.
Advantages of Using Properties
Properties also validate the data before storing it in the data fields. Fields can be made read-only or write-only using the properties. Properties make the program flexible. Flexibility means the programmer can change one part of the code without affecting other parts.

Can you use virtual, override, or abstract keywords on an accessor of a static property? 
It is an error to use a virtual, abstract, or override modifier on an accessor of a static property.

What are Access Modifiers in C#?
#1
Public, Private, Protected, Internal
protected internal, private protected
file - for that file (C# 11)
#2
Class, struct - > internal(default)
[class] Methods, Fields -> private(default)
[struct] Methods, Fields -> public(default)
delegate -> internal (namespace), private (class/struct)
Interface, Enum -> public(default)
#3
class -> (Public, internal, protected internal, private)
struct -> (public, internal, private) (Protected - no supported)
enum -> public, internal, private
fileds (in class/struct) -> public, private, protected, internal, protected internal

Can derived classes have greater accessibility than their base types?
Derived classes can't have greater accessibility than their base types.

What do you mean by “Explicitly Implementing an Interface”? Give an example?
class SampleClass : IControl, ISurface
{
	void IControl.Paint()
	{
		//code here
	}
	void ISurface.Paint()
	{
		//code here
	}
}

What is the execution control flow of overloaded methods?
Method Call -> Argument Matching -> Best Match Selection -> Method Execution -> Return Value